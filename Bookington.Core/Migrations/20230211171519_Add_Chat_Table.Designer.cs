// <auto-generated />
using System;
using Bookington.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bookington.Core.Migrations
{
    [DbContext(typeof(BookingtonDbContext))]
    [Migration("20230211171519_Add_Chat_Table")]
    partial class AddChatTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bookington.Core.Entities.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("phone");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("PK__accounts__3213E83F22FEC304");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Phone" }, "UQ__accounts__B43B145F9C9D23A4")
                        .IsUnique();

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.AccountOtp", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("datetime")
                        .HasColumnName("expire_at");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("is_confirmed");

                    b.Property<string>("OtpCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("otp_code");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("phone");

                    b.HasKey("Id")
                        .HasName("PK__account___3213E83FD40492D3");

                    b.HasIndex("Phone");

                    b.ToTable("account_otps", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Booking", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<DateTime>("BookAt")
                        .HasColumnType("datetime")
                        .HasColumnName("book_at");

                    b.Property<string>("BookBy")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("book_by");

                    b.Property<double>("OriginalPrice")
                        .HasColumnType("float")
                        .HasColumnName("original_price");

                    b.Property<DateTime>("PlayDate")
                        .HasColumnType("date")
                        .HasColumnName("play_date");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<string>("RefOrder")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_order");

                    b.Property<string>("RefSlot")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_slot");

                    b.Property<string>("VoucherCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("voucher_code");

                    b.HasKey("Id")
                        .HasName("PK__bookings__3213E83FB874A8D5");

                    b.HasIndex("BookBy");

                    b.HasIndex("RefOrder");

                    b.HasIndex("RefSlot");

                    b.HasIndex("VoucherCode");

                    b.ToTable("bookings", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.ChatMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("RefChatroom")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_chatroom");

                    b.Property<string>("RefOwner")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_owner");

                    b.Property<string>("RefUser")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_user");

                    b.Property<int>("SequenceOrder")
                        .HasColumnType("int")
                        .HasColumnName("sequence_order");

                    b.HasKey("Id")
                        .HasName("PK__chat_mes__3213E83F96A628B9");

                    b.HasIndex("RefChatroom");

                    b.HasIndex("RefOwner");

                    b.HasIndex("RefUser");

                    b.ToTable("chat_messages", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.ChatRoom", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("RefOwner")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_owner");

                    b.Property<string>("RefUser")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_user");

                    b.HasKey("Id")
                        .HasName("PK__chat_roo__3213E83FB89BEDAD");

                    b.HasIndex("RefOwner");

                    b.HasIndex("RefUser");

                    b.ToTable("chat_rooms", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("CommentWriterId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("comment_writer_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<double>("Rating")
                        .HasColumnType("float")
                        .HasColumnName("rating");

                    b.Property<string>("RefCourt")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_court");

                    b.HasKey("Id")
                        .HasName("PK__comments__3213E83F9B212B4E");

                    b.HasIndex("CommentWriterId");

                    b.HasIndex("RefCourt");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Court", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<TimeSpan>("CloseAt")
                        .HasColumnType("time")
                        .HasColumnName("close_at");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("DistrictId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("district_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<TimeSpan>("OpenAt")
                        .HasColumnType("time")
                        .HasColumnName("open_at");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("PK__courts__3213E83F12391D8B");

                    b.HasIndex("DistrictId");

                    b.HasIndex("OwnerId");

                    b.ToTable("courts", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.CourtImage", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("CourtId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("court_id");

                    b.Property<byte[]>("ImageBinary")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("image_binary");

                    b.HasKey("Id")
                        .HasName("PK__court_im__3213E83F1E8B6DF6");

                    b.HasIndex("CourtId");

                    b.ToTable("court_images", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.CourtReport", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("content");

                    b.Property<string>("RefCourt")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_court");

                    b.Property<string>("ReporterId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("reporter_id");

                    b.HasKey("Id")
                        .HasName("PK__court_re__3213E83F700D230C");

                    b.HasIndex("RefCourt");

                    b.HasIndex("ReporterId");

                    b.ToTable("court_reports", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.CourtType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("content");

                    b.HasKey("Id")
                        .HasName("PK__court_ty__3213E83FB078620A");

                    b.ToTable("court_types", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.District", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("district_name");

                    b.Property<string>("ProvinceId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("province_id");

                    b.HasKey("Id")
                        .HasName("PK__district__3213E83F054088A0");

                    b.HasIndex("ProvinceId");

                    b.ToTable("districts", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit")
                        .HasColumnName("is_canceled");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit")
                        .HasColumnName("is_paid");

                    b.Property<bool>("IsRefunded")
                        .HasColumnType("bit")
                        .HasColumnName("is_refunded");

                    b.Property<DateTime>("OrderAt")
                        .HasColumnType("datetime")
                        .HasColumnName("order_at");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float")
                        .HasColumnName("total_price");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("transaction_id");

                    b.HasKey("Id")
                        .HasName("PK__orders__3213E83F4FCD9A8A");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Province", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("province_name");

                    b.HasKey("Id")
                        .HasName("PK__province__3213E83F9A67BBD3");

                    b.ToTable("provinces", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role_name");

                    b.HasKey("Id")
                        .HasName("PK__roles__3213E83FEB6E3144");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Slot", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<string>("RefSubCourt")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_sub_court");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.HasKey("Id")
                        .HasName("PK__slots__3213E83FFC28A0F3");

                    b.HasIndex("RefSubCourt");

                    b.ToTable("slots", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.SubCourt", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("CourtTypeId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("court_type_id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("ParentCourtId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("parent_court_id");

                    b.HasKey("Id")
                        .HasName("PK__sub_cour__3213E83F4443E630");

                    b.HasIndex("CourtTypeId");

                    b.HasIndex("ParentCourtId");

                    b.ToTable("sub_courts", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.TransactionHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<double>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<string>("RefFrom")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_from");

                    b.Property<string>("RefTo")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_to");

                    b.HasKey("Id")
                        .HasName("PK__transact__3213E83FA00BD87B");

                    b.HasIndex("RefFrom");

                    b.HasIndex("RefTo");

                    b.ToTable("transaction_history", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.UserBalance", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<double>("Balance")
                        .HasColumnType("float")
                        .HasColumnName("balance");

                    b.Property<string>("RefUser")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_user");

                    b.HasKey("Id")
                        .HasName("PK__user_bal__3213E83F8707A95E");

                    b.HasIndex("RefUser");

                    b.ToTable("user_balances", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.UserReport", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("content");

                    b.Property<string>("RefUser")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_user");

                    b.Property<string>("ReporterId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("reporter_id");

                    b.HasKey("Id")
                        .HasName("PK__user_rep__3213E83FFB8FE9AF");

                    b.HasIndex("RefUser");

                    b.HasIndex("ReporterId");

                    b.ToTable("user_reports", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Voucher", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("create_by");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("description");

                    b.Property<double>("Discount")
                        .HasColumnType("float")
                        .HasColumnName("discount");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int>("MaxQuantity")
                        .HasColumnType("int")
                        .HasColumnName("max_quantity");

                    b.Property<string>("RefCourt")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_court");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.Property<int>("Usages")
                        .HasColumnType("int")
                        .HasColumnName("usages");

                    b.Property<string>("VoucherCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("voucher_code");

                    b.HasKey("Id")
                        .HasName("PK__vouchers__3213E83F3274A2E0");

                    b.HasIndex("CreateBy");

                    b.HasIndex("RefCourt");

                    b.HasIndex(new[] { "VoucherCode" }, "UQ__vouchers__21731069488649AC")
                        .IsUnique();

                    b.ToTable("vouchers", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Account", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__accounts__role_i__276EDEB3");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Bookington.Core.Entities.AccountOtp", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Account", "PhoneNavigation")
                        .WithMany("AccountOtps")
                        .HasForeignKey("Phone")
                        .HasPrincipalKey("Phone")
                        .IsRequired()
                        .HasConstraintName("FK__account_o__phone__2A4B4B5E");

                    b.Navigation("PhoneNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Booking", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Account", "BookByNavigation")
                        .WithMany("Bookings")
                        .HasForeignKey("BookBy")
                        .IsRequired()
                        .HasConstraintName("FK__bookings__book_b__5535A963");

                    b.HasOne("Bookington.Core.Entities.Order", "RefOrderNavigation")
                        .WithMany("Bookings")
                        .HasForeignKey("RefOrder")
                        .IsRequired()
                        .HasConstraintName("FK__bookings__ref_or__5441852A");

                    b.HasOne("Bookington.Core.Entities.Slot", "RefSlotNavigation")
                        .WithMany("Bookings")
                        .HasForeignKey("RefSlot")
                        .IsRequired()
                        .HasConstraintName("FK__bookings__ref_sl__534D60F1");

                    b.HasOne("Bookington.Core.Entities.Voucher", "VoucherCodeNavigation")
                        .WithMany("Bookings")
                        .HasForeignKey("VoucherCode")
                        .HasPrincipalKey("VoucherCode")
                        .IsRequired()
                        .HasConstraintName("FK__bookings__vouche__5629CD9C");

                    b.Navigation("BookByNavigation");

                    b.Navigation("RefOrderNavigation");

                    b.Navigation("RefSlotNavigation");

                    b.Navigation("VoucherCodeNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.ChatMessage", b =>
                {
                    b.HasOne("Bookington.Core.Entities.ChatRoom", "RefChatroomNavigation")
                        .WithMany("ChatMessages")
                        .HasForeignKey("RefChatroom")
                        .IsRequired()
                        .HasConstraintName("FK__chat_mess__ref_c__5CD6CB2B");

                    b.HasOne("Bookington.Core.Entities.Account", "RefOwnerNavigation")
                        .WithMany("ChatMessageRefOwnerNavigations")
                        .HasForeignKey("RefOwner")
                        .IsRequired()
                        .HasConstraintName("FK__chat_mess__ref_o__5DCAEF64");

                    b.HasOne("Bookington.Core.Entities.Account", "RefUserNavigation")
                        .WithMany("ChatMessageRefUserNavigations")
                        .HasForeignKey("RefUser")
                        .IsRequired()
                        .HasConstraintName("FK__chat_mess__ref_u__5EBF139D");

                    b.Navigation("RefChatroomNavigation");

                    b.Navigation("RefOwnerNavigation");

                    b.Navigation("RefUserNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.ChatRoom", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Account", "RefOwnerNavigation")
                        .WithMany("ChatRoomRefOwnerNavigations")
                        .HasForeignKey("RefOwner")
                        .IsRequired()
                        .HasConstraintName("FK__chat_room__ref_o__59063A47");

                    b.HasOne("Bookington.Core.Entities.Account", "RefUserNavigation")
                        .WithMany("ChatRoomRefUserNavigations")
                        .HasForeignKey("RefUser")
                        .IsRequired()
                        .HasConstraintName("FK__chat_room__ref_u__59FA5E80");

                    b.Navigation("RefOwnerNavigation");

                    b.Navigation("RefUserNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Comment", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Account", "CommentWriter")
                        .WithMany("Comments")
                        .HasForeignKey("CommentWriterId")
                        .IsRequired()
                        .HasConstraintName("FK__comments__commen__38996AB5");

                    b.HasOne("Bookington.Core.Entities.Court", "RefCourtNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("RefCourt")
                        .IsRequired()
                        .HasConstraintName("FK__comments__ref_co__398D8EEE");

                    b.Navigation("CommentWriter");

                    b.Navigation("RefCourtNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Court", b =>
                {
                    b.HasOne("Bookington.Core.Entities.District", "District")
                        .WithMany("Courts")
                        .HasForeignKey("DistrictId")
                        .IsRequired()
                        .HasConstraintName("FK__courts__district__32E0915F");

                    b.HasOne("Bookington.Core.Entities.Account", "Owner")
                        .WithMany("Courts")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK__courts__owner_id__31EC6D26");

                    b.Navigation("District");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Bookington.Core.Entities.CourtImage", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Court", "Court")
                        .WithMany("CourtImages")
                        .HasForeignKey("CourtId")
                        .IsRequired()
                        .HasConstraintName("FK__court_ima__court__35BCFE0A");

                    b.Navigation("Court");
                });

            modelBuilder.Entity("Bookington.Core.Entities.CourtReport", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Court", "RefCourtNavigation")
                        .WithMany("CourtReports")
                        .HasForeignKey("RefCourt")
                        .IsRequired()
                        .HasConstraintName("FK__court_rep__ref_c__3C69FB99");

                    b.HasOne("Bookington.Core.Entities.Account", "Reporter")
                        .WithMany("CourtReports")
                        .HasForeignKey("ReporterId")
                        .IsRequired()
                        .HasConstraintName("FK__court_rep__repor__3D5E1FD2");

                    b.Navigation("RefCourtNavigation");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("Bookington.Core.Entities.District", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .IsRequired()
                        .HasConstraintName("FK__districts__provi__2F10007B");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Slot", b =>
                {
                    b.HasOne("Bookington.Core.Entities.SubCourt", "RefSubCourtNavigation")
                        .WithMany("Slots")
                        .HasForeignKey("RefSubCourt")
                        .IsRequired()
                        .HasConstraintName("FK__slots__ref_sub_c__49C3F6B7");

                    b.Navigation("RefSubCourtNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.SubCourt", b =>
                {
                    b.HasOne("Bookington.Core.Entities.CourtType", "CourtType")
                        .WithMany("SubCourts")
                        .HasForeignKey("CourtTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__sub_court__court__46E78A0C");

                    b.HasOne("Bookington.Core.Entities.Court", "ParentCourt")
                        .WithMany("SubCourts")
                        .HasForeignKey("ParentCourtId")
                        .IsRequired()
                        .HasConstraintName("FK__sub_court__paren__45F365D3");

                    b.Navigation("CourtType");

                    b.Navigation("ParentCourt");
                });

            modelBuilder.Entity("Bookington.Core.Entities.TransactionHistory", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Account", "RefFromNavigation")
                        .WithMany("TransactionHistoryRefFromNavigations")
                        .HasForeignKey("RefFrom")
                        .IsRequired()
                        .HasConstraintName("FK__transacti__ref_f__6477ECF3");

                    b.HasOne("Bookington.Core.Entities.Account", "RefToNavigation")
                        .WithMany("TransactionHistoryRefToNavigations")
                        .HasForeignKey("RefTo")
                        .IsRequired()
                        .HasConstraintName("FK__transacti__ref_t__656C112C");

                    b.Navigation("RefFromNavigation");

                    b.Navigation("RefToNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.UserBalance", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Account", "RefUserNavigation")
                        .WithMany("UserBalances")
                        .HasForeignKey("RefUser")
                        .IsRequired()
                        .HasConstraintName("FK__user_bala__ref_u__619B8048");

                    b.Navigation("RefUserNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.UserReport", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Account", "RefUserNavigation")
                        .WithMany("UserReportRefUserNavigations")
                        .HasForeignKey("RefUser")
                        .IsRequired()
                        .HasConstraintName("FK__user_repo__ref_u__403A8C7D");

                    b.HasOne("Bookington.Core.Entities.Account", "Reporter")
                        .WithMany("UserReportReporters")
                        .HasForeignKey("ReporterId")
                        .IsRequired()
                        .HasConstraintName("FK__user_repo__repor__412EB0B6");

                    b.Navigation("RefUserNavigation");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Voucher", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Account", "CreateByNavigation")
                        .WithMany("Vouchers")
                        .HasForeignKey("CreateBy")
                        .IsRequired()
                        .HasConstraintName("FK__vouchers__create__4D94879B");

                    b.HasOne("Bookington.Core.Entities.Court", "RefCourtNavigation")
                        .WithMany("Vouchers")
                        .HasForeignKey("RefCourt")
                        .IsRequired()
                        .HasConstraintName("FK__vouchers__ref_co__4E88ABD4");

                    b.Navigation("CreateByNavigation");

                    b.Navigation("RefCourtNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Account", b =>
                {
                    b.Navigation("AccountOtps");

                    b.Navigation("Bookings");

                    b.Navigation("ChatMessageRefOwnerNavigations");

                    b.Navigation("ChatMessageRefUserNavigations");

                    b.Navigation("ChatRoomRefOwnerNavigations");

                    b.Navigation("ChatRoomRefUserNavigations");

                    b.Navigation("Comments");

                    b.Navigation("CourtReports");

                    b.Navigation("Courts");

                    b.Navigation("TransactionHistoryRefFromNavigations");

                    b.Navigation("TransactionHistoryRefToNavigations");

                    b.Navigation("UserBalances");

                    b.Navigation("UserReportRefUserNavigations");

                    b.Navigation("UserReportReporters");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Bookington.Core.Entities.ChatRoom", b =>
                {
                    b.Navigation("ChatMessages");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Court", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CourtImages");

                    b.Navigation("CourtReports");

                    b.Navigation("SubCourts");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Bookington.Core.Entities.CourtType", b =>
                {
                    b.Navigation("SubCourts");
                });

            modelBuilder.Entity("Bookington.Core.Entities.District", b =>
                {
                    b.Navigation("Courts");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Order", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Province", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Slot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Bookington.Core.Entities.SubCourt", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Voucher", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
