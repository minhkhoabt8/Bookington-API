// <auto-generated />
using System;
using Bookington.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bookington.Core.Migrations
{
    [DbContext(typeof(BookingtonDbContext))]
    [Migration("20230321112720_Bookington_DB_v1.7")]
    partial class BookingtonDBv17
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bookington.Core.Entities.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit")
                        .HasColumnName("is_verified");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("phone");

                    b.Property<string>("RefAvatar")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_avatar");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("PK__accounts__3213E83F9A2958FA");

                    b.HasIndex("RefAvatar");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Phone" }, "UQ__accounts__B43B145F397BEDD5")
                        .IsUnique();

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.AccountAvatar", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("RefImage")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_image");

                    b.HasKey("Id")
                        .HasName("PK__account___3213E83F9D100C5D");

                    b.ToTable("account_avatars", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.AccountOtp", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("datetime")
                        .HasColumnName("expire_at");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("is_confirmed");

                    b.Property<string>("OtpCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("otp_code");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("phone");

                    b.Property<string>("RefAccount")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_account");

                    b.HasKey("Id")
                        .HasName("PK__account___3213E83F3202D36A");

                    b.HasIndex("RefAccount");

                    b.ToTable("account_otps", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Ad", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("AdLink")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("ad_link");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsCourtAd")
                        .HasColumnType("bit")
                        .HasColumnName("is_court_ad");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int>("PromotionOrder")
                        .HasColumnType("int")
                        .HasColumnName("promotion_order");

                    b.Property<string>("RefCourt")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_court");

                    b.Property<string>("RefImage")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_image");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("start_time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PK__ads__3213E83F17EF7121");

                    b.HasIndex("RefCourt");

                    b.ToTable("ads", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Ban", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("BanUntil")
                        .HasColumnType("datetime")
                        .HasColumnName("ban_until");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<bool>("IsAccountBan")
                        .HasColumnType("bit")
                        .HasColumnName("is_account_ban");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsCourtBan")
                        .HasColumnType("bit")
                        .HasColumnName("is_court_ban");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("reason");

                    b.Property<string>("RefAccount")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_account");

                    b.Property<string>("RefCourt")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_court");

                    b.HasKey("Id")
                        .HasName("PK__bans__3213E83F43F72A6F");

                    b.HasIndex("RefAccount");

                    b.HasIndex("RefCourt");

                    b.ToTable("bans", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Booking", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<DateTime>("BookAt")
                        .HasColumnType("datetime")
                        .HasColumnName("book_at");

                    b.Property<string>("BookBy")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("book_by");

                    b.Property<DateTime>("PlayDate")
                        .HasColumnType("date")
                        .HasColumnName("play_date");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<string>("RefOrder")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_order");

                    b.Property<string>("RefSlot")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_slot");

                    b.HasKey("Id")
                        .HasName("PK__bookings__3213E83F64570587");

                    b.HasIndex("BookBy");

                    b.HasIndex("RefOrder");

                    b.HasIndex("RefSlot");

                    b.ToTable("bookings", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.ChatMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("RefChatroom")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_chatroom");

                    b.Property<string>("RefOwner")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_owner");

                    b.Property<string>("RefUser")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_user");

                    b.Property<int>("SequenceOrder")
                        .HasColumnType("int")
                        .HasColumnName("sequence_order");

                    b.HasKey("Id")
                        .HasName("PK__chat_mes__3213E83FDD47C9F5");

                    b.HasIndex("RefChatroom");

                    b.HasIndex("RefOwner");

                    b.HasIndex("RefUser");

                    b.ToTable("chat_messages", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.ChatRoom", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("RefOwner")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_owner");

                    b.Property<string>("RefUser")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_user");

                    b.HasKey("Id")
                        .HasName("PK__chat_roo__3213E83FFE942561");

                    b.HasIndex("RefOwner");

                    b.HasIndex("RefUser");

                    b.ToTable("chat_rooms", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("CommentWriterId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("comment_writer_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<double>("Rating")
                        .HasColumnType("float")
                        .HasColumnName("rating");

                    b.Property<string>("RefCourt")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_court");

                    b.HasKey("Id")
                        .HasName("PK__comments__3213E83FD28979F0");

                    b.HasIndex("CommentWriterId");

                    b.HasIndex("RefCourt");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Competition", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("CompetitionCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("competition_code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<string>("HostBy")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("host_by");

                    b.Property<bool>("IsStarted")
                        .HasColumnType("bit")
                        .HasColumnName("is_started");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("name");

                    b.Property<int>("NumOfTeamsAllowed")
                        .HasColumnType("int")
                        .HasColumnName("num_of_teams_allowed");

                    b.Property<DateTime>("RegisterDeadline")
                        .HasColumnType("datetime")
                        .HasColumnName("register_deadline");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("PK__competit__3213E83FD439E557");

                    b.HasIndex("HostBy");

                    b.ToTable("competitions", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.CompetitionMatch", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<int>("MatchPosition")
                        .HasColumnType("int")
                        .HasColumnName("match_position");

                    b.Property<string>("RefCompetition")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_competition");

                    b.Property<string>("RefMatch")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_match");

                    b.HasKey("Id")
                        .HasName("PK__competit__3213E83F5D1048D8");

                    b.HasIndex("RefCompetition");

                    b.HasIndex("RefMatch");

                    b.ToTable("competition_matches", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Court", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<TimeSpan>("CloseAt")
                        .HasColumnType("time")
                        .HasColumnName("close_at");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("DistrictId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("district_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("name");

                    b.Property<TimeSpan>("OpenAt")
                        .HasColumnType("time")
                        .HasColumnName("open_at");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("PK__courts__3213E83FB258E19D");

                    b.HasIndex("DistrictId");

                    b.HasIndex("OwnerId");

                    b.ToTable("courts", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.CourtImage", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("CourtId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("court_id");

                    b.Property<string>("RefImage")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_image");

                    b.HasKey("Id")
                        .HasName("PK__court_im__3213E83F052C61C1");

                    b.HasIndex("CourtId");

                    b.ToTable("court_images", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.CourtReport", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("content");

                    b.Property<bool>("IsResponded")
                        .HasColumnType("bit")
                        .HasColumnName("is_responded");

                    b.Property<string>("RefCourt")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_court");

                    b.Property<string>("RefResponse")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_response");

                    b.Property<string>("ReporterId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("reporter_id");

                    b.HasKey("Id")
                        .HasName("PK__court_re__3213E83F847D9840");

                    b.HasIndex("RefCourt");

                    b.HasIndex("RefResponse");

                    b.HasIndex("ReporterId");

                    b.ToTable("court_reports", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.CourtReportResponse", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("content");

                    b.HasKey("Id")
                        .HasName("PK__court_re__3213E83F633ECED0");

                    b.ToTable("court_report_responses", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.CourtType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("content");

                    b.HasKey("Id")
                        .HasName("PK__court_ty__3213E83FA0EAE041");

                    b.ToTable("court_types", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.District", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("district_name");

                    b.Property<string>("ProvinceId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("province_id");

                    b.HasKey("Id")
                        .HasName("PK__district__3213E83FB8413502");

                    b.HasIndex("ProvinceId");

                    b.ToTable("districts", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.LoginToken", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("datetime")
                        .HasColumnName("expire_at");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit")
                        .HasColumnName("is_revoked");

                    b.Property<string>("RefAccount")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_account");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("refresh_token");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("token");

                    b.HasKey("Id")
                        .HasName("PK__login_to__3213E83F2D789ED4");

                    b.HasIndex("RefAccount");

                    b.ToTable("login_tokens", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Match", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("HostBy")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("host_by");

                    b.Property<bool>("IsPaymentSplitted")
                        .HasColumnType("bit")
                        .HasColumnName("is_payment_splitted");

                    b.Property<string>("MatchCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("match_code");

                    b.Property<int>("NumOfPlayersAllowed")
                        .HasColumnType("int")
                        .HasColumnName("num_of_players_allowed");

                    b.Property<int>("NumOfRounds")
                        .HasColumnType("int")
                        .HasColumnName("num_of_rounds");

                    b.Property<string>("RefBooking")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_booking");

                    b.HasKey("Id")
                        .HasName("PK__matches__3213E83F49FD2E48");

                    b.HasIndex("HostBy");

                    b.HasIndex("RefBooking");

                    b.ToTable("matches", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.MatchTeam", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("RefMatch")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_match");

                    b.Property<string>("RefTeam")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_team");

                    b.HasKey("Id")
                        .HasName("PK__match_te__3213E83FC99F7C9B");

                    b.HasIndex("RefMatch");

                    b.HasIndex("RefTeam");

                    b.ToTable("match_teams", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.MomoTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<double>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit")
                        .HasColumnName("is_successful");

                    b.HasKey("Id")
                        .HasName("PK__momo_tra__3213E83FBE8BF800");

                    b.ToTable("momo_transactions", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("is_read");

                    b.Property<string>("RefAccount")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_account");

                    b.HasKey("Id")
                        .HasName("PK__notifica__3213E83F69AFDDA1");

                    b.HasIndex("RefAccount");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit")
                        .HasColumnName("is_canceled");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit")
                        .HasColumnName("is_paid");

                    b.Property<bool>("IsRefunded")
                        .HasColumnType("bit")
                        .HasColumnName("is_refunded");

                    b.Property<DateTime>("OrderAt")
                        .HasColumnType("datetime")
                        .HasColumnName("order_at");

                    b.Property<double>("OriginalPrice")
                        .HasColumnType("float")
                        .HasColumnName("original_price");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float")
                        .HasColumnName("total_price");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("transaction_id");

                    b.Property<string>("VoucherCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("voucher_code");

                    b.HasKey("Id")
                        .HasName("PK__orders__3213E83FCD46385C");

                    b.HasIndex("TransactionId");

                    b.HasIndex("VoucherCode");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Province", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("province_name");

                    b.HasKey("Id")
                        .HasName("PK__province__3213E83F8E5F2367");

                    b.ToTable("provinces", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role_name");

                    b.HasKey("Id")
                        .HasName("PK__roles__3213E83FC6C6E202");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Round", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<int>("Point")
                        .HasColumnType("int")
                        .HasColumnName("point");

                    b.Property<string>("RefMatch")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_match");

                    b.Property<string>("RefTeam")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_team");

                    b.Property<int>("RoundNum")
                        .HasColumnType("int")
                        .HasColumnName("round_num");

                    b.HasKey("Id")
                        .HasName("PK__rounds__3213E83FA84F30B7");

                    b.HasIndex("RefMatch");

                    b.HasIndex("RefTeam");

                    b.ToTable("rounds", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Slot", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("DaysInSchedule")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("days_in_schedule");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.HasKey("Id")
                        .HasName("PK__slots__3213E83FC38719FD");

                    b.ToTable("slots", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.SubCourt", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("CourtTypeId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("court_type_id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("ParentCourtId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("parent_court_id");

                    b.HasKey("Id")
                        .HasName("PK__sub_cour__3213E83FBF0987C0");

                    b.HasIndex("CourtTypeId");

                    b.HasIndex("ParentCourtId");

                    b.ToTable("sub_courts", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.SubCourtSlot", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<string>("RefSlot")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_slot");

                    b.Property<string>("RefSubCourt")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_sub_court");

                    b.HasKey("Id")
                        .HasName("PK__sub_cour__3213E83FD099B9FF");

                    b.HasIndex("RefSlot");

                    b.HasIndex("RefSubCourt");

                    b.ToTable("sub_court_slots", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Team", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<bool>("IsCompetitionTeam")
                        .HasColumnType("bit")
                        .HasColumnName("is_competition_team");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("RefCompetition")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_competition");

                    b.Property<string>("RefMatch")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_match");

                    b.Property<string>("TeamCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("team_code");

                    b.HasKey("Id")
                        .HasName("PK__teams__3213E83F88A07E73");

                    b.HasIndex("RefCompetition");

                    b.HasIndex("RefMatch");

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.TeamPlayer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("RefAccount")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_account");

                    b.Property<string>("RefTeam")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_team");

                    b.HasKey("Id")
                        .HasName("PK__team_pla__3213E83F558D630D");

                    b.HasIndex("RefAccount");

                    b.HasIndex("RefTeam");

                    b.ToTable("team_players", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<double>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("reason");

                    b.Property<string>("RefFrom")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_from");

                    b.Property<string>("RefMomoTransaction")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_momo_transaction");

                    b.Property<string>("RefTo")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_to");

                    b.HasKey("Id")
                        .HasName("PK__transact__3213E83FA9389AD9");

                    b.HasIndex("RefFrom");

                    b.HasIndex("RefMomoTransaction");

                    b.HasIndex("RefTo");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.UserBalance", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<double>("Balance")
                        .HasColumnType("float")
                        .HasColumnName("balance");

                    b.Property<string>("RefUser")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_user");

                    b.HasKey("Id")
                        .HasName("PK__user_bal__3213E83FA2CE1C1E");

                    b.HasIndex("RefUser");

                    b.ToTable("user_balances", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.UserReport", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("content");

                    b.Property<bool>("IsResponded")
                        .HasColumnType("bit")
                        .HasColumnName("is_responded");

                    b.Property<string>("RefResponse")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_response");

                    b.Property<string>("RefUser")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_user");

                    b.Property<string>("ReporterId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("reporter_id");

                    b.HasKey("Id")
                        .HasName("PK__user_rep__3213E83F64648F88");

                    b.HasIndex("RefResponse");

                    b.HasIndex("RefUser");

                    b.HasIndex("ReporterId");

                    b.ToTable("user_reports", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.UserReportResponse", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("content");

                    b.HasKey("Id")
                        .HasName("PK__user_rep__3213E83F135B73FA");

                    b.ToTable("user_report_responses", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Voucher", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("create_by");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("description");

                    b.Property<double>("Discount")
                        .HasColumnType("float")
                        .HasColumnName("discount");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int>("MaxQuantity")
                        .HasColumnType("int")
                        .HasColumnName("max_quantity");

                    b.Property<string>("RefCourt")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ref_court");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.Property<int>("Usages")
                        .HasColumnType("int")
                        .HasColumnName("usages");

                    b.Property<string>("VoucherCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("voucher_code");

                    b.HasKey("Id")
                        .HasName("PK__vouchers__3213E83FA7D82A14");

                    b.HasIndex("CreateBy");

                    b.HasIndex("RefCourt");

                    b.HasIndex(new[] { "VoucherCode" }, "UQ__vouchers__21731069342B7D6D")
                        .IsUnique();

                    b.ToTable("vouchers", (string)null);
                });

            modelBuilder.Entity("Bookington.Core.Entities.Account", b =>
                {
                    b.HasOne("Bookington.Core.Entities.AccountAvatar", "RefAvatarNavigation")
                        .WithMany("Accounts")
                        .HasForeignKey("RefAvatar")
                        .IsRequired()
                        .HasConstraintName("FK__accounts__ref_av__2A4B4B5E");

                    b.HasOne("Bookington.Core.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__accounts__role_i__29572725");

                    b.Navigation("RefAvatarNavigation");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Bookington.Core.Entities.AccountOtp", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Account", "RefAccountNavigation")
                        .WithMany("AccountOtps")
                        .HasForeignKey("RefAccount")
                        .IsRequired()
                        .HasConstraintName("FK__account_o__ref_a__2D27B809");

                    b.Navigation("RefAccountNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Ad", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Court", "RefCourtNavigation")
                        .WithMany("Ads")
                        .HasForeignKey("RefCourt")
                        .HasConstraintName("FK__ads__ref_court__7D439ABD");

                    b.Navigation("RefCourtNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Ban", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Account", "RefAccountNavigation")
                        .WithMany("Bans")
                        .HasForeignKey("RefAccount")
                        .HasConstraintName("FK__bans__ref_accoun__00200768");

                    b.HasOne("Bookington.Core.Entities.Court", "RefCourtNavigation")
                        .WithMany("Bans")
                        .HasForeignKey("RefCourt")
                        .HasConstraintName("FK__bans__ref_court__01142BA1");

                    b.Navigation("RefAccountNavigation");

                    b.Navigation("RefCourtNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Booking", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Account", "BookByNavigation")
                        .WithMany("Bookings")
                        .HasForeignKey("BookBy")
                        .IsRequired()
                        .HasConstraintName("FK__bookings__book_b__6C190EBB");

                    b.HasOne("Bookington.Core.Entities.Order", "RefOrderNavigation")
                        .WithMany("Bookings")
                        .HasForeignKey("RefOrder")
                        .IsRequired()
                        .HasConstraintName("FK__bookings__ref_or__6B24EA82");

                    b.HasOne("Bookington.Core.Entities.Slot", "RefSlotNavigation")
                        .WithMany("Bookings")
                        .HasForeignKey("RefSlot")
                        .IsRequired()
                        .HasConstraintName("FK__bookings__ref_sl__6A30C649");

                    b.Navigation("BookByNavigation");

                    b.Navigation("RefOrderNavigation");

                    b.Navigation("RefSlotNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.ChatMessage", b =>
                {
                    b.HasOne("Bookington.Core.Entities.ChatRoom", "RefChatroomNavigation")
                        .WithMany("ChatMessages")
                        .HasForeignKey("RefChatroom")
                        .IsRequired()
                        .HasConstraintName("FK__chat_mess__ref_c__72C60C4A");

                    b.HasOne("Bookington.Core.Entities.Account", "RefOwnerNavigation")
                        .WithMany("ChatMessageRefOwnerNavigations")
                        .HasForeignKey("RefOwner")
                        .IsRequired()
                        .HasConstraintName("FK__chat_mess__ref_o__73BA3083");

                    b.HasOne("Bookington.Core.Entities.Account", "RefUserNavigation")
                        .WithMany("ChatMessageRefUserNavigations")
                        .HasForeignKey("RefUser")
                        .IsRequired()
                        .HasConstraintName("FK__chat_mess__ref_u__74AE54BC");

                    b.Navigation("RefChatroomNavigation");

                    b.Navigation("RefOwnerNavigation");

                    b.Navigation("RefUserNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.ChatRoom", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Account", "RefOwnerNavigation")
                        .WithMany("ChatRoomRefOwnerNavigations")
                        .HasForeignKey("RefOwner")
                        .IsRequired()
                        .HasConstraintName("FK__chat_room__ref_o__6EF57B66");

                    b.HasOne("Bookington.Core.Entities.Account", "RefUserNavigation")
                        .WithMany("ChatRoomRefUserNavigations")
                        .HasForeignKey("RefUser")
                        .IsRequired()
                        .HasConstraintName("FK__chat_room__ref_u__6FE99F9F");

                    b.Navigation("RefOwnerNavigation");

                    b.Navigation("RefUserNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Comment", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Account", "CommentWriter")
                        .WithMany("Comments")
                        .HasForeignKey("CommentWriterId")
                        .IsRequired()
                        .HasConstraintName("FK__comments__commen__3E52440B");

                    b.HasOne("Bookington.Core.Entities.Court", "RefCourtNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("RefCourt")
                        .IsRequired()
                        .HasConstraintName("FK__comments__ref_co__3F466844");

                    b.Navigation("CommentWriter");

                    b.Navigation("RefCourtNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Competition", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Account", "HostByNavigation")
                        .WithMany("Competitions")
                        .HasForeignKey("HostBy")
                        .IsRequired()
                        .HasConstraintName("FK__competiti__host___07C12930");

                    b.Navigation("HostByNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.CompetitionMatch", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Competition", "RefCompetitionNavigation")
                        .WithMany("CompetitionMatches")
                        .HasForeignKey("RefCompetition")
                        .IsRequired()
                        .HasConstraintName("FK__competiti__ref_c__0A9D95DB");

                    b.HasOne("Bookington.Core.Entities.Match", "RefMatchNavigation")
                        .WithMany("CompetitionMatches")
                        .HasForeignKey("RefMatch")
                        .IsRequired()
                        .HasConstraintName("FK__competiti__ref_m__0B91BA14");

                    b.Navigation("RefCompetitionNavigation");

                    b.Navigation("RefMatchNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Court", b =>
                {
                    b.HasOne("Bookington.Core.Entities.District", "District")
                        .WithMany("Courts")
                        .HasForeignKey("DistrictId")
                        .IsRequired()
                        .HasConstraintName("FK__courts__district__38996AB5");

                    b.HasOne("Bookington.Core.Entities.Account", "Owner")
                        .WithMany("Courts")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK__courts__owner_id__37A5467C");

                    b.Navigation("District");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Bookington.Core.Entities.CourtImage", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Court", "Court")
                        .WithMany("CourtImages")
                        .HasForeignKey("CourtId")
                        .IsRequired()
                        .HasConstraintName("FK__court_ima__court__3B75D760");

                    b.Navigation("Court");
                });

            modelBuilder.Entity("Bookington.Core.Entities.CourtReport", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Court", "RefCourtNavigation")
                        .WithMany("CourtReports")
                        .HasForeignKey("RefCourt")
                        .IsRequired()
                        .HasConstraintName("FK__court_rep__ref_c__440B1D61");

                    b.HasOne("Bookington.Core.Entities.CourtReportResponse", "RefResponseNavigation")
                        .WithMany("CourtReports")
                        .HasForeignKey("RefResponse")
                        .HasConstraintName("FK__court_rep__ref_r__45F365D3");

                    b.HasOne("Bookington.Core.Entities.Account", "Reporter")
                        .WithMany("CourtReports")
                        .HasForeignKey("ReporterId")
                        .IsRequired()
                        .HasConstraintName("FK__court_rep__repor__44FF419A");

                    b.Navigation("RefCourtNavigation");

                    b.Navigation("RefResponseNavigation");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("Bookington.Core.Entities.District", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .IsRequired()
                        .HasConstraintName("FK__districts__provi__34C8D9D1");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Bookington.Core.Entities.LoginToken", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Account", "RefAccountNavigation")
                        .WithMany("LoginTokens")
                        .HasForeignKey("RefAccount")
                        .IsRequired()
                        .HasConstraintName("FK__login_tok__ref_a__300424B4");

                    b.Navigation("RefAccountNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Match", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Account", "HostByNavigation")
                        .WithMany("Matches")
                        .HasForeignKey("HostBy")
                        .IsRequired()
                        .HasConstraintName("FK__matches__host_by__03F0984C");

                    b.HasOne("Bookington.Core.Entities.Booking", "RefBookingNavigation")
                        .WithMany("Matches")
                        .HasForeignKey("RefBooking")
                        .IsRequired()
                        .HasConstraintName("FK__matches__ref_boo__04E4BC85");

                    b.Navigation("HostByNavigation");

                    b.Navigation("RefBookingNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.MatchTeam", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Match", "RefMatchNavigation")
                        .WithMany("MatchTeams")
                        .HasForeignKey("RefMatch")
                        .IsRequired()
                        .HasConstraintName("FK__match_tea__ref_m__123EB7A3");

                    b.HasOne("Bookington.Core.Entities.Team", "RefTeamNavigation")
                        .WithMany("MatchTeams")
                        .HasForeignKey("RefTeam")
                        .IsRequired()
                        .HasConstraintName("FK__match_tea__ref_t__1332DBDC");

                    b.Navigation("RefMatchNavigation");

                    b.Navigation("RefTeamNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Notification", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Account", "RefAccountNavigation")
                        .WithMany("Notifications")
                        .HasForeignKey("RefAccount")
                        .IsRequired()
                        .HasConstraintName("FK__notificat__ref_a__7A672E12");

                    b.Navigation("RefAccountNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Order", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Transaction", "Transaction")
                        .WithMany("Orders")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("FK__orders__transact__66603565");

                    b.HasOne("Bookington.Core.Entities.Voucher", "VoucherCodeNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("VoucherCode")
                        .HasPrincipalKey("VoucherCode")
                        .HasConstraintName("FK__orders__voucher___6754599E");

                    b.Navigation("Transaction");

                    b.Navigation("VoucherCodeNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Round", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Match", "RefMatchNavigation")
                        .WithMany("Rounds")
                        .HasForeignKey("RefMatch")
                        .IsRequired()
                        .HasConstraintName("FK__rounds__ref_matc__160F4887");

                    b.HasOne("Bookington.Core.Entities.Team", "RefTeamNavigation")
                        .WithMany("Rounds")
                        .HasForeignKey("RefTeam")
                        .IsRequired()
                        .HasConstraintName("FK__rounds__ref_team__17036CC0");

                    b.Navigation("RefMatchNavigation");

                    b.Navigation("RefTeamNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.SubCourt", b =>
                {
                    b.HasOne("Bookington.Core.Entities.CourtType", "CourtType")
                        .WithMany("SubCourts")
                        .HasForeignKey("CourtTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__sub_court__court__52593CB8");

                    b.HasOne("Bookington.Core.Entities.Court", "ParentCourt")
                        .WithMany("SubCourts")
                        .HasForeignKey("ParentCourtId")
                        .IsRequired()
                        .HasConstraintName("FK__sub_court__paren__5165187F");

                    b.Navigation("CourtType");

                    b.Navigation("ParentCourt");
                });

            modelBuilder.Entity("Bookington.Core.Entities.SubCourtSlot", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Slot", "RefSlotNavigation")
                        .WithMany("SubCourtSlots")
                        .HasForeignKey("RefSlot")
                        .IsRequired()
                        .HasConstraintName("FK__sub_court__ref_s__5812160E");

                    b.HasOne("Bookington.Core.Entities.SubCourt", "RefSubCourtNavigation")
                        .WithMany("SubCourtSlots")
                        .HasForeignKey("RefSubCourt")
                        .IsRequired()
                        .HasConstraintName("FK__sub_court__ref_s__571DF1D5");

                    b.Navigation("RefSlotNavigation");

                    b.Navigation("RefSubCourtNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Team", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Competition", "RefCompetitionNavigation")
                        .WithMany("Teams")
                        .HasForeignKey("RefCompetition")
                        .HasConstraintName("FK__teams__ref_compe__0F624AF8");

                    b.HasOne("Bookington.Core.Entities.Match", "RefMatchNavigation")
                        .WithMany("Teams")
                        .HasForeignKey("RefMatch")
                        .IsRequired()
                        .HasConstraintName("FK__teams__ref_match__0E6E26BF");

                    b.Navigation("RefCompetitionNavigation");

                    b.Navigation("RefMatchNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.TeamPlayer", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Account", "RefAccountNavigation")
                        .WithMany("TeamPlayers")
                        .HasForeignKey("RefAccount")
                        .IsRequired()
                        .HasConstraintName("FK__team_play__ref_a__1AD3FDA4");

                    b.HasOne("Bookington.Core.Entities.Team", "RefTeamNavigation")
                        .WithMany("TeamPlayers")
                        .HasForeignKey("RefTeam")
                        .IsRequired()
                        .HasConstraintName("FK__team_play__ref_t__19DFD96B");

                    b.Navigation("RefAccountNavigation");

                    b.Navigation("RefTeamNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Transaction", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Account", "RefFromNavigation")
                        .WithMany("TransactionRefFromNavigations")
                        .HasForeignKey("RefFrom")
                        .IsRequired()
                        .HasConstraintName("FK__transacti__ref_f__619B8048");

                    b.HasOne("Bookington.Core.Entities.MomoTransaction", "RefMomoTransactionNavigation")
                        .WithMany("Transactions")
                        .HasForeignKey("RefMomoTransaction")
                        .HasConstraintName("FK__transacti__ref_m__6383C8BA");

                    b.HasOne("Bookington.Core.Entities.Account", "RefToNavigation")
                        .WithMany("TransactionRefToNavigations")
                        .HasForeignKey("RefTo")
                        .IsRequired()
                        .HasConstraintName("FK__transacti__ref_t__628FA481");

                    b.Navigation("RefFromNavigation");

                    b.Navigation("RefMomoTransactionNavigation");

                    b.Navigation("RefToNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.UserBalance", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Account", "RefUserNavigation")
                        .WithMany("UserBalances")
                        .HasForeignKey("RefUser")
                        .IsRequired()
                        .HasConstraintName("FK__user_bala__ref_u__778AC167");

                    b.Navigation("RefUserNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.UserReport", b =>
                {
                    b.HasOne("Bookington.Core.Entities.UserReportResponse", "RefResponseNavigation")
                        .WithMany("UserReports")
                        .HasForeignKey("RefResponse")
                        .HasConstraintName("FK__user_repo__ref_r__4CA06362");

                    b.HasOne("Bookington.Core.Entities.Account", "RefUserNavigation")
                        .WithMany("UserReportRefUserNavigations")
                        .HasForeignKey("RefUser")
                        .IsRequired()
                        .HasConstraintName("FK__user_repo__ref_u__4AB81AF0");

                    b.HasOne("Bookington.Core.Entities.Account", "Reporter")
                        .WithMany("UserReportReporters")
                        .HasForeignKey("ReporterId")
                        .IsRequired()
                        .HasConstraintName("FK__user_repo__repor__4BAC3F29");

                    b.Navigation("RefResponseNavigation");

                    b.Navigation("RefUserNavigation");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Voucher", b =>
                {
                    b.HasOne("Bookington.Core.Entities.Account", "CreateByNavigation")
                        .WithMany("Vouchers")
                        .HasForeignKey("CreateBy")
                        .IsRequired()
                        .HasConstraintName("FK__vouchers__create__5BE2A6F2");

                    b.HasOne("Bookington.Core.Entities.Court", "RefCourtNavigation")
                        .WithMany("Vouchers")
                        .HasForeignKey("RefCourt")
                        .IsRequired()
                        .HasConstraintName("FK__vouchers__ref_co__5CD6CB2B");

                    b.Navigation("CreateByNavigation");

                    b.Navigation("RefCourtNavigation");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Account", b =>
                {
                    b.Navigation("AccountOtps");

                    b.Navigation("Bans");

                    b.Navigation("Bookings");

                    b.Navigation("ChatMessageRefOwnerNavigations");

                    b.Navigation("ChatMessageRefUserNavigations");

                    b.Navigation("ChatRoomRefOwnerNavigations");

                    b.Navigation("ChatRoomRefUserNavigations");

                    b.Navigation("Comments");

                    b.Navigation("Competitions");

                    b.Navigation("CourtReports");

                    b.Navigation("Courts");

                    b.Navigation("LoginTokens");

                    b.Navigation("Matches");

                    b.Navigation("Notifications");

                    b.Navigation("TeamPlayers");

                    b.Navigation("TransactionRefFromNavigations");

                    b.Navigation("TransactionRefToNavigations");

                    b.Navigation("UserBalances");

                    b.Navigation("UserReportRefUserNavigations");

                    b.Navigation("UserReportReporters");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Bookington.Core.Entities.AccountAvatar", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Booking", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("Bookington.Core.Entities.ChatRoom", b =>
                {
                    b.Navigation("ChatMessages");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Competition", b =>
                {
                    b.Navigation("CompetitionMatches");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Court", b =>
                {
                    b.Navigation("Ads");

                    b.Navigation("Bans");

                    b.Navigation("Comments");

                    b.Navigation("CourtImages");

                    b.Navigation("CourtReports");

                    b.Navigation("SubCourts");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Bookington.Core.Entities.CourtReportResponse", b =>
                {
                    b.Navigation("CourtReports");
                });

            modelBuilder.Entity("Bookington.Core.Entities.CourtType", b =>
                {
                    b.Navigation("SubCourts");
                });

            modelBuilder.Entity("Bookington.Core.Entities.District", b =>
                {
                    b.Navigation("Courts");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Match", b =>
                {
                    b.Navigation("CompetitionMatches");

                    b.Navigation("MatchTeams");

                    b.Navigation("Rounds");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Bookington.Core.Entities.MomoTransaction", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Order", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Province", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Slot", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("SubCourtSlots");
                });

            modelBuilder.Entity("Bookington.Core.Entities.SubCourt", b =>
                {
                    b.Navigation("SubCourtSlots");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Team", b =>
                {
                    b.Navigation("MatchTeams");

                    b.Navigation("Rounds");

                    b.Navigation("TeamPlayers");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Transaction", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Bookington.Core.Entities.UserReportResponse", b =>
                {
                    b.Navigation("UserReports");
                });

            modelBuilder.Entity("Bookington.Core.Entities.Voucher", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
